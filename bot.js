const TelegramApi = require("node-telegram-bot-api")
const token = "1150536330:AAGOwL8xJZGXlW4B5y8ZRvyYJb2vEftOlvc" 
const mariadb = require('mariadb');
const pool = mariadb.createPool({
    host: "109.94.209.66",
    port:3306,
    user: "admin6247k",
    password: "lao6247K",
    database:"trainlist"
});

const bot = new TelegramApi(token, {polling:true})
/*==================== –ó–∞–ø–∏—Ç–∏ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö ====================*/
const updateStat = (id, date) => { 
    pool.getConnection()
        .then(conn => {
          conn.query("SELECT 1 as value")
            .then(() => {
              console.log( "Successful Update!"); 
              return conn.query(`UPDATE sokaT SET value = value+1 WHERE id=${id}`),
              conn.query(`UPDATE sokaT SET value = ${date} WHERE id=6`);

            })   
        }).catch(err => {
          console.log(err);
        });
  }

  async function getStat(){
      
          let conn = await pool.getConnection();
          let all = await conn.query('SELECT * FROM sokaT')
          return all
       
  }



const start = () => {

    bot.setMyCommands([
        {command: "/soka", description: "–î—ñ–∑–Ω–∞—Ç–∏—Å—è –°–û–ö–£ –¥–Ω—è !)"},
        {command: "/look", description: "–î—ñ–∑–Ω–∞—Ç–∏—Å—è —è–∫–∏–π —É –°–û–ö–ò –ª—É–∫"},
        {command: "/stat", description: "–°—Ç–∞—Çi—Å—Çi–∫–∞!"}
    ]);

    bot.on("message", async msg => {
        const text = msg.text;
        const chatId = msg.chat.id;
        
        switch (text) {

            case "/stat" :
                return(
                    statData = await getStat(),
                    bot.sendMessage(chatId,`–°–ø–∏—Å–æ–∫ –°–û–ö –¥–Ω—è –∑–∞ –≤–µ—Å—å —á–∞—Å:

        ${statData[0].name}    *| ${statData[0].value} |
        ${statData[1].name}         *| ${statData[1].value} |
        ${statData[2].name}           *| ${statData[2].value} |
        ${statData[3].name}      *| ${statData[3].value} |
        ${statData[4].name}*| ${statData[4].value} |
                    `)
                    // FOREACH 
                    // bot.sendMessage(chatId,"–°–ø–∏—Å–æ–∫ –°–û–ö –¥–Ω—è –∑–∞ –≤–µ—Å—å —á–∞—Å:"),
                    // statData = await getStat(),
                    // statData.forEach(element => {
                    // bot.sendMessage(chatId, ` 
                    //     ${element.name}, ${element.value}`);
                    // }) 
                )
                
            case "/soka":
                statData = await getStat()
                console.log()
                if (statData[5].value !== dateYear) {
                    const users = [
                        {name: "–ú–∞—Ä—Ç–∞ –ñ–æ–ª–æ–±–∞–∫ ", id: 1},
                        {name: "–ú–∞—Ä—ñ—è –ì–∞–±—á–∞–∫", id: 2},
                        {name: "–û–ª–µ–≥ –ì–∞–±—á–∞–∫", id: 3},
                        {name: "–í—ñ—Ä–∞ –ü—à–µ–Ω–∏—á–∫–∞", id: 4},
                        {name: "–°–Ω—ñ–∂–∞–Ω–∞ –°–∞—Ö–∞—Ä—á—É–∫", id: 5}
                    ]
                    let soka = users[randomNum(0, 5)]
                return (
                    
                    // if (statData[5].value === 49 ) {console.log(124235)},
                    setTimeout(() => { bot.sendMessage(chatId, `${text1[randomNum(0, 10)]}`)}, 1000),
                    setTimeout(() => { bot.sendMessage(chatId, `${text2[randomNum(0, 12)]}`)}, 3000),
                    setTimeout(() => { bot.sendMessage(chatId, `${text3[randomNum(0, 11)]}`)}, 5000),
                    setTimeout(() => { bot.sendMessage(chatId, `${text4[randomNum(0, 12)]}${soka.name}`)}, 7000),
                    updateStat(soka.id, dateYear)
                    
                )
                }  else {
                    return bot.sendMessage(chatId, `–°–û–ö–ê –¥–Ω—è –≤—ñ–¥–æ–º–∞! `);
                 }

                case '/look' : 
                console.log('look');
                photo = looks[dateYear]
                  bot.sendPhoto(chatId, await photo),
                  bot.sendMessage(chatId, `${lookText[randomNum(0, 9)]}`)
                 break

            default:
                return bot.sendMessage(chatId,  `${textWrong}`)
        }
    })
}

start()






/*==================== —Ä–∞–Ω–¥–æ–º–Ω–µ —á–∏—Å–ª–æ ===================*/
function randomNum(a, b) {
    return  Math.floor(Math.random() * b) + a;
    // Function returns the product of a and b
  }



/*==================== –æ—Ç—Ä–∏–º—É—î–º–æ –¥–µ–Ω—å —Ä–æ–∫—É ====================*/

let date365 = 0;

let currentDate = new Date();
let currentYear = currentDate.getFullYear();
let currentMonth = currentDate.getMonth(); 
let currentDay = currentDate.getDate(); 

let monthLength = [31,28,31,30,31,30,31,31,30,31,30,31];

let leapYear = new Date(currentYear, 1, 29); 
if (leapYear.getDate() == 29) { // If it's a leap year, changes 28 to 29
    monthLength[1] = 29;
}

for ( i=0; i < currentMonth; i++ ) { 
    date365 = date365 + monthLength[i];
}
let dateYear = date365 + currentDay; 

console.log("–î–µ–Ω—å —Ä–æ–∫—É:",dateYear);


/*==================== –†–∞–Ω–¥–æ–º–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ===================*/
let text1 = ['–ù–∞–≤—ñ—â–æ –≤–∏ –º–µ–Ω–µ —Ä–æ–∑–±—É–¥–∏–ª–∏...',
             '–Ü–Ω—ñ—Ü—ñ—é—é –ø–æ—à—É–∫ –°–û–ö–ò...',
             '–û—Ç–∂–µ... —Ö—Ç–æ –∂ —Å—å–æ–≥–æ–¥–Ω—ñ –°–û–ö–ê?',
             '–•—Ç–æ —Å—å–æ–≥–æ–¥–Ω—ñ —â–∞—Å–ª–∏–≤—á–∏–∫?',
             '–ó–Ω–æ–≤—É –∑–∞–±–∞–≤—É–Ω—å–∫–∞—î—Ç–µ—Å—è ? –ê–Ω—É —à—É—Ä—É–π—Ç–µ –¥–æ —Ä–æ–±–æ—Ç–∏...',
             '–û–±–µ—Ä–µ–∂–Ω–æ! –°–û–ö–ê –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞!',
            '–í–∞–º —â–µ –Ω–µ –Ω–∞–¥–æ—ó–ª–æ!?',
            '–°–≤—è—Ç–∏–π –ë–æ–∂–µ, —Å–≤—è—Ç–∏–π –∫—Ä—ñ–ø–∫–∏–π, —è –∑ –£–ª–∏—á–Ω–æ–≥–æ, –∞ —Ç–∏ –∑–≤—ñ–¥–∫–∏?',
             '–ì–µ–π, –Ω–∞–≤—ñ—â–æ –≤–∏ –º–µ–Ω–µ —Ä–æ–∑–±—É–¥–∏–ª–∏...',
             'Woop-woop! Thats the sound of da SOKA-police!']
             
let text2 = ['–í–µ–¥–µ—Ç—å—Å—è –ø–æ—à—É–∫ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö',
             '–í—ñ–π—Å—å–∫–æ–≤–∏–π —Å—É–ø—É—Ç–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–∏–π, –∫–æ–¥–∏ –¥–æ—Å—Ç—É–ø—É –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ...',
             '–í–∏—ó–∂–¥–∂–∞—é –Ω–∞ –º—ñ—Å—Ü–µ..._',
             '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö —Ö—Ç–æ –Ω–µ –ø–æ–º–∏–≤ –≥–æ–ª–æ–≤—É... ',
             '–ú–∞—à–∏–Ω–∏ –≤–∏—ó—Ö–∞–ª–∏',
             '–ù—É –¥–∞–≤–∞–π, –ø–æ–¥–∏–≤–∏–º–æ—Å—è —Ö—Ç–æ —Ç—É—Ç –°–û–ö–ê ...',
             '–î–∑–≤–æ–Ω—é —Å–ø–∏—Ç–∞—Ç–∏—Å—ñ –≤ –û–ª–µ—Å—å–∫–∏...',
             '–î–∑–≤–æ–Ω—é –≤ –£–ª–∏—á–Ω–µ–Ω—Å—å–∫—É —Å—ñ–ª—å—Å—å–∫—É —Ä–∞–¥—É...',
             '–°–æ–Ω–Ω–æ –¥–∏–≤–∏—Ç—å—Å—è –Ω–∞ –ø–∞–ø–µ—Ä–∏',
             '–ß–∞–π? –ö–æ—Ñ–µ? –ö–∞–ø—É—á—ñ–Ω–æ?, —á–∏ –≥–∞—Ä—è—á–æ–≥–æ –º—É–∂—á–∏–Ω—É???',
             '–í—ñ–¥—á—É–≤–∞—é –∑–∞–ø–∞—Ö –°–û–ö–ò...',
             '–ê –º–æ–≥–ª–∏ –± –Ω–∞ —Ä–æ–±–æ—Ç—ñ —Å–ø—Ä–∞–≤–æ—é –∑–∞–π–º–∞—Ç–∏—Å—è']
let text3 = ['–í–µ–¥–µ—Ç—å—Å—è –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –ø—ñ–¥–æ–∑—Ä—é–≤–∞–Ω–æ–≥–æ...',
             '–£ —Ü—å–æ–º—É –Ω–µ–º–∞—î —Å–µ–Ω—Å—É...',
             '–î–æ—Å—Ç—É–ø –æ—Ç—Ä–∏–º–∞–Ω–æ. –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –∞—Ä—Ö—ñ–≤–∏.',
             '–ë—É–¥–∏–Ω–∫–æ–≤—ñ –∫–Ω–∏–≥–∏ —Å–µ–ª–∞ –í–æ—é—Ç–∏—á—ñ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ',
             '–ù–µ –º–æ–∂–µ –±—É—Ç–∏!',
             '–û–≥–æ-–≥–æ...',
             '–ü–µ—Ä–µ–≤—ñ—Ä—è—é –¥–∞–Ω—ñ...',
             '–¢–∞–∫, —â–æ —Ç—É—Ç —É –Ω–∞—Å?',
             '–¢–∞–∫-—Ç–∞–∫, —â–æ –∂ —Ç—É—Ç —É –Ω–∞—Å...',
             '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–ª—ñ—Ü–µ–π—Å—å–∫–æ—ó –±–∞–∑–∏, –∑–±–∏—Ç–∏—Ö –º–∞—à–∏–Ω–æ—é... ',
             '']
let text4 = ['–ê–≥–∞! –í—ñ—Ç–∞—é! –°—å–æ–≥–æ–¥–Ω—ñ —Ç–∏ –°–û–ö–ê - ',
             '–Ü –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞ –ª—é–¥–∏–Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ–≥–æ –¥–Ω—è... –∞ –Ω—ñ, –ø–æ–º–∏–ª–∫–∞, –≤—Å—å–æ–≥–æ –ª–∏—à–µ –°–û–ö–ê ',
             '–ù–ï –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É—Ç–∏ –ï–∫—Å—Ç—Ä–∞—Å–µ–∫—Å–æ–º, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —â–æ –°–û–ö–ê —Å—å–æ–≥–æ–¥–Ω—ñ -  ',
             '–•—Ç–æ –± –º—ñ–≥ –ø–æ–¥—É–º–∞—Ç–∏, –∞–ª–µ —Ç–∏ –°–û–ö–ê - ',
             '–•—Ç–æ —Ç—É—Ç —É –Ω–∞—Å –°–û–ö–ê? –¢–∏ –°–û–ö–ê!üòõ - ',
             '–ù—É —Ç–∏ —ñ –°–û–ö–ê, ',
             '–£ –°–û–ö–ò —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∏—Ç–∞ –ø–µ—Å—å–∫–∞ - ',
             '–û–≥–æ, –≤–∏ –ø–æ–¥–∏–≤—ñ—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏! –°–û–ö–ê –¥–Ω—è-—Ü–µ - ',
             '–°—Ç–æ—è—Ç–∏! –ù–µ —Ä—É—Ö–∞—Ç–∏—Å—å! –í–∏ –æ–≥–æ–ª–æ—à–µ–Ω—ñ –°–û–ö–û–Æ ',
             '–©–æ? –î–µ? –ö–æ–ª–∏? –ê —Ç–∏ –°–û–ö–ê - ',
             '*–°–û–ö–ê –∑–≤–∏—á–∞–π–Ω–∞, 1—à—Ç. - ']

let textWrong = [
    '–ù–µ –≤–º—ñ—î—à ci –±–∞–≤–∏—Ç–∏ - —ñ–¥–∏ –¥–æ–¥–æ–º—Éü§∑‚Äç‚ôÄÔ∏è']

let lookText = [
'–õ—É–∫ –¥–ª—è —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ—ó –°–û–ö–ò...',
'–ù–∞—Ä—è–¥, –≤ —è–∫–æ–º—É –°–û–ö–ê –ø—ñ–¥–µ –Ω–∞ –ø–∞—Å–∫—É',
'–ù–∞—Ä—è–¥, —è–∫–∏–π –°–û–ö–ê –æ–¥—è–≥–Ω–µ –¥–æ –õ–∞–ø–ø—ñ –Ω–∞ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è...',
'–ù–∞—Ä—è–¥, —è–∫–∏–π –°–û–ö–ê –æ–¥—è–≥–Ω–µ –¥–æ –í—ñ—Ä–∏ –Ω–∞ –í–µ—Å—ñ–ª–ª—è...',
'–ù–∞—Ä—è–¥, —è–∫–∏–π –°–û–ö–ê –æ–¥—è–≥–Ω–µ –¥–æ –ú–∞—Ä—ñ—ó –Ω–∞ –∑–∞—Ä—É—á–∏–Ω–∏...',
'–ù–∞—Ä—è–¥, —è–∫–∏–π –°–û–ö–ê –æ–¥—è–≥–Ω–µ –¥–æ –°–Ω—ñ–∂–∞–Ω–∏ –Ω–∞ —Ä–æ–∑–ø–∏—Å–∫—É...',
'–ù–∞—Ä—è–¥, —è–∫–∏–π –°–û–ö–ê –æ–¥—è–≥–Ω–µ –¥–æ –ú–∞—Ä—Ç–∏ –Ω–∞ —Å—Ç—Ä–∏–∂–∏–Ω–∏ —ó—ó 3 –¥–∏—Ç–∏–Ω–∏...',
'–õ—É–∫, –≤ —è–∫–æ–º—É –°–û–ö–ê –ø—ñ–¥–µ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–∞ —Ä–æ–±–æ—Ç—É',
'–õ—É–∫, –≤ —è–∫–æ–º—É –°–û–ö–ê –±—É–¥–µ –ø–ª–µ—Å—Ç–∏ –≤—ñ–Ω—Ü—ñ ',
]
/*==================== –º–∞—Å–∏–≤ –∑ –õ—É–∫–∞–º–∏ –¥–Ω—è ====================*/







const looks = [
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "http://img.funtema.ru/2011/01/03012011/7/1.jpg",
    "http://img.funtema.ru/2011/01/03012011/7/2.jpg",
    "http://img.funtema.ru/2011/01/03012011/7/3.jpg",
    "http://img.funtema.ru/2011/01/03012011/7/4.jpg",
    "http://img.funtema.ru/2011/01/03012011/7/5.jpg",
    "http://img.funtema.ru/2011/01/03012011/7/6.jpg",
    "http://img.funtema.ru/2011/01/03012011/7/7.jpg",
    "http://img.funtema.ru/2011/01/03012011/7/8.jpg",
    "http://img.funtema.ru/2011/01/03012011/7/9.jpg",
    "http://img.funtema.ru/2011/01/03012011/7/10.jpg",
    "https://cdn.tlgrm.app/stickers/14d/5af/14d5afd7-6c55-328b-b26b-a8d72beb5530/192/1.webp",
    "https://cdn.tlgrm.app/stickers/14d/5af/14d5afd7-6c55-328b-b26b-a8d72beb5530/192/2.webp",
    "https://cdn.tlgrm.app/stickers/14d/5af/14d5afd7-6c55-328b-b26b-a8d72beb5530/192/3.webp",
    "https://cdn.tlgrm.app/stickers/14d/5af/14d5afd7-6c55-328b-b26b-a8d72beb5530/192/4.webp",
    "https://cdn.tlgrm.app/stickers/14d/5af/14d5afd7-6c55-328b-b26b-a8d72beb5530/192/5.webp",
    "https://cdn.tlgrm.app/stickers/14d/5af/14d5afd7-6c55-328b-b26b-a8d72beb5530/192/6.webp",
    
]

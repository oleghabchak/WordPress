const TelegramApi = require("node-telegram-bot-api")
const token = "1150536330:AAGOwL8xJZGXlW4B5y8ZRvyYJb2vEftOlvc" 
const mariadb = require('mariadb');
const pool = mariadb.createPool({
    host: "109.94.209.66",
    port:3306,
    user: "admin6247k",
    password: "lao6247K",
    database:"trainlist"
});

const bot = new TelegramApi(token, {polling:true})
/*==================== –ó–∞–ø–∏—Ç–∏ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö ====================*/
const updateStat = (id, date) => { 
    pool.getConnection()
        .then(conn => {
          conn.query("SELECT 1 as value")
            .then(() => {
              console.log( "Successful Update!"); 
              return conn.query(`UPDATE sokaT SET value = value+1 WHERE id=${id}`),
              conn.query(`UPDATE sokaT SET value = ${date} WHERE id=6`);

            })   
        }).catch(err => {
          console.log(err);
        });
  }

  async function getStat(){
      
          let conn = await pool.getConnection();
          let all = await conn.query('SELECT * FROM sokaT')
          return all
       
  }



const start = () => {

  
    bot.setMyCommands([
        {command: "/soka", description: "–î—ñ–∑–Ω–∞—Ç–∏—Å—è –°–û–ö–£ –¥–Ω—è —ñ —è–∫–∏–π —É –Ω–µ—ó –ª—É–∫"},
        {command: "/stat", description: "–°—Ç–∞—Çi—Å—Çi–∫–∞!"}
    ]);

    bot.on("message", async msg => {
        const text = msg.text;
        const chatId = msg.chat.id;

        switch (text) {

            case "/stat" :
                return(
                    statData = await getStat(),
                    bot.sendMessage(chatId,`–°–ø–∏—Å–æ–∫ –°–û–ö –¥–Ω—è –∑–∞ –≤–µ—Å—å —á–∞—Å:

                    ${statData[0].name}    *| ${statData[0].value} |
                    ${statData[1].name}         *| ${statData[1].value} |
                    ${statData[2].name}           *| ${statData[2].value} |
                    ${statData[3].name}      *| ${statData[3].value} |
                    ${statData[4].name}*| ${statData[4].value} |
                    `)
                    // FOREACH 
                    // bot.sendMessage(chatId,"–°–ø–∏—Å–æ–∫ –°–û–ö –¥–Ω—è –∑–∞ –≤–µ—Å—å —á–∞—Å:"),
                    // statData = await getStat(),
                    // statData.forEach(element => {
                    // bot.sendMessage(chatId, ` 
                    //     ${element.name}, ${element.value}`);
                    // }) 
                )
                
            case "/soka":
                statData = await getStat()
                console.log()
                if (statData[5].value !== dateYear) {
                    const users = [
                        {name: "–ú–∞—Ä—Ç–∞ –ñ–æ–ª–æ–±–∞–∫ ", id: 1},
                        {name: "–ú–∞—Ä—ñ—è –ì–∞–±—á–∞–∫", id: 2},
                        {name: "–û–ª–µ–≥ –ì–∞–±—á–∞–∫", id: 3},
                        {name: "–í—ñ—Ä–∞ –ü—à–µ–Ω–∏—á–∫–∞", id: 4},
                        {name: "–°–Ω—ñ–∂–∞–Ω–∞ –°–∞—Ö–∞—Ä—á—É–∫", id: 5}
                    ]
                    let soka = users[randomNum(0, 5)]
                return (
                    
                    // if (statData[5].value === 49 ) {console.log(124235)},
                    setTimeout(() => { bot.sendMessage(chatId, `${text1[randomNum(0, 9)]}`)}, 1000),
                    setTimeout(() => { bot.sendMessage(chatId, `${text2[randomNum(0, 9)]}`)}, 3000),
                    setTimeout(() => { bot.sendMessage(chatId, `${text3[randomNum(0, 9)]}`)}, 5000),
                    setTimeout(() => { bot.sendMessage(chatId, `${text4[randomNum(0, 9)]}${soka.name}`)}, 7000),
                    updateStat(soka.id, dateYear)
                    
                )
                }
            default:
                return bot.sendMessage(chatId, `–°–û–ö–ê –¥–Ω—è –≤—ñ–¥–æ–º–∞! `);
        }
    })
}

start()






/*==================== —Ä–∞–Ω–¥–æ–º–Ω–µ —á–∏—Å–ª–æ ===================*/
function randomNum(a, b) {
    return  Math.floor(Math.random() * b) + a;
    // Function returns the product of a and b
  }

console.log(randomNum(1,4));

/*==================== –æ—Ç—Ä–∏–º—É—î–º–æ –¥–µ–Ω—å —Ä–æ–∫—É ====================*/

let date365 = 0;

let currentDate = new Date();
let currentYear = currentDate.getFullYear();
let currentMonth = currentDate.getMonth(); 
let currentDay = currentDate.getDate(); 

let monthLength = [31,28,31,30,31,30,31,31,30,31,30,31];

let leapYear = new Date(currentYear, 1, 29); 
if (leapYear.getDate() == 29) { // If it's a leap year, changes 28 to 29
    monthLength[1] = 29;
}

for ( i=0; i < currentMonth; i++ ) { 
    date365 = date365 + monthLength[i];
}
let dateYear = date365 + currentDay; 

console.log(dateYear);

/*==================== –†–∞–Ω–¥–æ–º–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ===================*/
let text1 = ['–ù–∞–≤—ñ—â–æ –≤–∏ –º–µ–Ω–µ —Ä–æ–∑–±—É–¥–∏–ª–∏...',
             '–Ü–Ω—ñ—Ü—ñ—é—é –ø–æ—à—É–∫ *–ø—ñ–¥–æ—Ä–∞ –¥–Ω—è*...',
             '–û—Ç–∂–µ... —Ö—Ç–æ –∂ —Å—å–æ–≥–æ–¥–Ω—ñ *–ø—ñ–¥–æ—Ä –¥–Ω—è*?',
             '–•—Ç–æ —Å—å–æ–≥–æ–¥–Ω—ñ —â–∞—Å–ª–∏–≤—á–∏–∫?',
             '–ó–Ω–æ–≤—É –≤ —Ü—ñ –≤–∞—à—ñ —ñ–≥—Ä–∞—à–∫–∏ –≥—Ä–∞—î—Ç–µ? –ù—É –¥–æ–±—Ä–µ...',
             '–û–±–µ—Ä–µ–∂–Ω–æ! *–ü—ñ–¥–æ—Ä –¥–Ω—è* –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π!',
             '–ó–∞—Ä–∞–∑ *–∑–∞—á–∞—Ä—É—î–º–æ*...',
             '–°–∏—Å—Ç–µ–º–∞ –∑–ª–∞–º–∞–Ω–∞. –ó–∞–≤–¥–∞–Ω–æ —à–∫–æ–¥–∏. –ó–∞–ø—É—â–µ–Ω–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç—Ä–∑–∞—Ö–æ–¥—ñ–≤.',
             '–ì–µ–π, –Ω–∞–≤—ñ—â–æ —Ä–æ–∑–±—É–¥–∏–ª–∏...',
             '*### RUNNING TYPIDOR.SH',
             'Woop-woop! Thats the sound of da SOKA-police!']
let text2 = ['_–í–µ–¥–µ—Ç—å—Å—è –ø–æ—à—É–∫ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö_',
             '_–í—ñ–π—Å—å–∫–æ–≤–∏–π —Å—É–ø—É—Ç–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–∏–π, –∫–æ–¥–∏ –¥–æ—Å—Ç—É–ø—É –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ..._',
             '_–í–∏—ó–∂–¥–∂–∞—é –Ω–∞ –º—ñ—Å—Ü–µ..._',
             '_–î–µ –∂ –≤—ñ–Ω..._',
             '_–ú–∞—à–∏–Ω–∏ –≤–∏—ó—Ö–∞–ª–∏_',
             '_–ù—É –¥–∞–≤–∞–π, –ø–æ–¥–∏–≤–∏–º–æ—Å—è —Ö—Ç–æ —Ç—É—Ç –∫–ª–∞—Å–Ω–∏–π ..._',
             '_–¶—ñ–∫–∞–≤–æ..._',
             '_–°–∫–∞–Ω—É—é..._',
             '_–°–æ–Ω–Ω–æ –¥–∏–≤–∏—Ç—å—Å—è –Ω–∞ –ø–∞–ø–µ—Ä–∏_',
             '_–•–º..._',
             '_–®–∞–º–∞–Ω—ñ–º-—à–∞–º–∞–Ω—ñ–º..._',
             '_(–í–æ—Ä—á–∏—Ç—å) –ê –º–æ–≥–ª–∏ –± –Ω–∞ —Ä–æ–±–æ—Ç—ñ —Å–ø—Ä–∞–≤–æ—é –∑–∞–π–º–∞—Ç–∏—Å—è_']
let text3 = ['–í–µ–¥–µ—Ç—å—Å—è –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –ø—ñ–¥–æ–∑—Ä—é–≤–∞–Ω–æ–≥–æ...',
             '–í–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –º–æ–±—ñ–ª—å–Ω–æ–≥–æ —é–Ω—ñ—Ç—É.',
             '–£ —Ü—å–æ–º—É –Ω–µ–º–∞—î —Å–µ–Ω—Å—É...',
             '–î–æ—Å—Ç—É–ø –æ—Ç—Ä–∏–º–∞–Ω–æ. –ê–Ω—É–ª—é–≤–∞–Ω–Ω—è –ø—Ä–æ—Ç–æ–∫–æ–ª—É.',
             '–ö–ï–ö!',
             '–ù–µ –º–æ–∂–µ –±—É—Ç–∏!',
             '–û–≥–æ-–≥–æ...',
             '–û—Ö...',
             '–ü–µ—Ä–µ–≤—ñ—Ä—è—é –¥–∞–Ω—ñ...',
             '–¢–∞–∫, —â–æ —Ç—É—Ç —É –Ω–∞—Å?',
             '–¢–∞–∫-—Ç–∞–∫, —â–æ –∂ —Ç—É—Ç —É –Ω–∞—Å...',
             '–¢–∏—Å—è—á–∞ —á–æ—Ä—Ç—ñ–≤!',
             '–©–æ –∂ –∑ –Ω–∞–º–∏ —Å—Ç–∞–ª–æ...',
             '–Ø –≤ –Ω–µ–±–µ–∑–ø–µ—Ü—ñ, —Å–∏—Å—Ç–µ–º–∏ –ø–æ—à–∫–æ–¥–∂–µ–Ω—ñ!']
let text4 = ['–ê–≥–∞! –í—ñ—Ç–∞—é! –°—å–æ–≥–æ–¥–Ω—ñ *—Ç–∏ –ø—ñ–¥–æ—Ä* - ',
             '–Ü –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞ –ª—é–¥–∏–Ω–∞ –¥–Ω—è —Å—å–æ–≥–æ–¥–Ω—ñ... –∞ –Ω—ñ, –ø–æ–º–∏–ª–∫–∞, –≤—Å—å–æ–≥–æ –ª–∏—à–µ *–ø—ñ–¥–æ—Ä –¥–Ω—è*- ',
             '–ó–¥–∞—î—Ç—å—Å—è, *–ø–∏–¥–æ—Ä –¥–Ω—è* - ',
             '–•—Ç–æ –± –º—ñ–≥ –ø–æ–¥—É–º–∞—Ç–∏, –∞–ª–µ *–ø—ñ–¥—ñ—Ä –¥–Ω—è* - ',
             '–•—Ç–æ —Ç—É—Ç —É –Ω–∞—Å *–ø—ñ–¥–æ—Ä –¥–Ω—è*? –¢–∏ *–ø—ñ–¥–æ—Ä –¥–Ω—è* - ',
             '–ù—É —Ç–∏ —ñ *–ø—ñ–¥–æ—Ä*, ',
             '–ù—è—à–Ω–∏–π *–ø—ñ–¥–æ—Ä –¥–Ω—è* - ',
             '–û–≥–æ, –≤–∏ –ø–æ–¥–∏–≤—ñ—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏! –°–û–ö–ê –¥–Ω—è-—Ç–æ - ',
             '–°—Ç–æ—è—Ç–∏! –ù–µ —Ä—É—Ö–∞—Ç–∏—Å—å! –í–∏ –æ–≥–æ–ª–æ—à–µ–Ω—ñ *–ø—ñ–¥–æ—Ä–æ–º –¥–Ω—è*, ',
             '–©–æ? –î–µ? –ö–æ–ª–∏? –ê —Ç–∏ *–ø—ñ–¥–æ—Ä –¥–Ω—è* - ',
             '*–ü—ñ–¥–æ—Ä –¥–Ω—è* –∑–≤–∏—á–∞–π–Ω–∏–π, 1—à—Ç. - ']
let textWrong = [
    '–ù–µ –≤–º—ñ—î—à ci –±–∞–≤–∏—Ç–∏ —ñ–¥–∏ –¥–æ–¥–æ–º—Éü§∑‚Äç‚ôÄÔ∏è'
]















/*==================== –º–∞—Å–∏–≤ –∑ –õ—É–∫–∞–º–∏ –¥–Ω—è ====================*/
const looks = [
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "https://cdn.tlgrm.app/stickers/14d/5af/14d5afd7-6c55-328b-b26b-a8d72beb5530/192/1.webp",
    "https://cdn.tlgrm.app/stickers/14d/5af/14d5afd7-6c55-328b-b26b-a8d72beb5530/192/2.webp",
    "https://cdn.tlgrm.app/stickers/14d/5af/14d5afd7-6c55-328b-b26b-a8d72beb5530/192/3.webp",
    "https://cdn.tlgrm.app/stickers/14d/5af/14d5afd7-6c55-328b-b26b-a8d72beb5530/192/4.webp",
    "https://cdn.tlgrm.app/stickers/14d/5af/14d5afd7-6c55-328b-b26b-a8d72beb5530/192/5.webp",
    "https://cdn.tlgrm.app/stickers/14d/5af/14d5afd7-6c55-328b-b26b-a8d72beb5530/192/6.webp",
    "https://cdn.tlgrm.app/stickers/14d/5af/14d5afd7-6c55-328b-b26b-a8d72beb5530/192/7.webp",
    "https://cdn.tlgrm.app/stickers/14d/5af/14d5afd7-6c55-328b-b26b-a8d72beb5530/192/7.webp",
    "https://cdn.tlgrm.app/stickers/14d/5af/14d5afd7-6c55-328b-b26b-a8d72beb5530/192/7.webp",
    "https://cdn.tlgrm.app/stickers/14d/5af/14d5afd7-6c55-328b-b26b-a8d72beb5530/192/7.webp",
    "https://cdn.tlgrm.app/stickers/14d/5af/14d5afd7-6c55-328b-b26b-a8d72beb5530/192/7.webp",
    "https://cdn.tlgrm.app/stickers/14d/5af/14d5afd7-6c55-328b-b26b-a8d72beb5530/192/7.webp",
    "https://cdn.tlgrm.app/stickers/14d/5af/14d5afd7-6c55-328b-b26b-a8d72beb5530/192/7.webp",
    "https://cdn.tlgrm.app/stickers/14d/5af/14d5afd7-6c55-328b-b26b-a8d72beb5530/192/7.webp",
    "https://cdn.tlgrm.app/stickers/14d/5af/14d5afd7-6c55-328b-b26b-a8d72beb5530/192/7.webp",
    "https://cdn.tlgrm.app/stickers/14d/5af/14d5afd7-6c55-328b-b26b-a8d72beb5530/192/7.webp",
    "https://cdn.tlgrm.app/stickers/14d/5af/14d5afd7-6c55-328b-b26b-a8d72beb5530/192/7.webp",
    
]